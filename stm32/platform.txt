#
# Copyright (c) 2013 ELL-i co-operative.
#
# Ell-i version of the Arduino 32 bit Core and the Ell-i platform
#
# For more info:
# https://github.com/arduino/Arduino/wiki/Arduino-IDE-1.5---3rd-party-Hardware-specification
# TBD

name=ELL-i Boards
version=1.5.4

# STM32 compile variables
# -----------------------

compiler.path=       {runtime.ide.path}/hardware/tools/g++_arm_none_eabi/bin/
compiler.prefix=     {compiler.path}arm-none-eabi-

compiler.cmd.cc=     {compiler.prefix}gcc
compiler.cmd.cxx=    {compiler.prefix}g++
compiler.cmd.ld=     {compiler.prefix}ld
compiler.cmd.ar=     {compiler.prefix}ar
compiler.cmd.size=   {compiler.prefix}size

compiler.cmd.elf2hex=       {compiler.prefix}objcopy
compiler.cmd.elf2hex.flags= -O ihex

compiler.cflags.debug=      -g
compiler.cflags.optimise=   -Os -w --param max-inline-insns-single=500
compiler.cflags.sections=   -ffunction-sections -fdata-sections -fno-common
compiler.cflags.libraries=  -nostdlib
compiler.cflags.target=     -mcpu={build.mcu} -mthumb

compiler.cflags.defines=    -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DELLI_{build.board} -DARDUINO_ARCH_{build.arch}

compiler.cxxflags=          -fno-rtti -fno-exceptions

compiler.cflags=            {compiler.cflags.debug} {compiler.cflags.optimise} {compiler.cflags.sections} {compiler.cflags.libraries} {compiler.cflags.target} {compiler.cflags.defines}

compiler.cmd.cc.flags=      -c -std=c99     {compiler.cflags}
compiler.cmd.cxx.flags=     -c -std=gnu++0x {compiler.cflags} {compiler.cxxflags}
compiler.cmd.as.flags=      {compiler.cflags.debug} -assembler-with-cpp

compiler.cmd.ar.flags=      -rcs

compiler.ldflags.common=    --gc-sections --cref --check-sections --entry=Reset_Handler --unresolved-symbols=report-all --warn-common --warn-section-align --warn-unresolved-symbols
compiler.ldflags.ldscript=  "-T{build.variant.path}/{build.ldscript}"
compiler.ldflags.map=       "-Map={build.path}/{build.project_name}.map"

compiler.cmd.ld.flags=      {compiler.ldflags.common} {compiler.ldflags.ldscript} {compiler.ldflags.map}

compiler.cmd.ld.out=        -o "{build.path}/{build.project_name}.elf"
compiler.cmd.ld.objs=       --start-group {object_files} "{build.path}/{archive_file}" --end-group
compiler.cmd.ld.libs=       "-L{build.path}" "-L{build.variant.path}/lib" "{build.variant_system_libs}" -lgcc

# this can be overriden in boards.txt
build.extra_flags=

# STM32 compile patterns -- the left hand strings are fixed in the IDE
# --------------------------------------------------------------------

## Compile C files
recipe.c.o.pattern=  "{compiler.cmd.cc}"  {compiler.cmd.cc.flags}  {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile C++ files
recipe.cpp.o.pattern="{compiler.cmd.cxx}" {compiler.cmd.cxx.flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern=   "{compiler.cmd.ar}"  {compiler.cmd.ar.flags} "{build.path}/{archive_file}" "{object_file}"

## Combine gc-sections, archives, and objects into an elf
recipe.c.combine.pattern="{compiler.cmd.ld}" {compiler.cmd.ld.flags} {compiler.cmd.ld.out} {compiler.cmd.ld.objs} {compiler.cmd.ld.libs}

## Create eeprom
recipe.objcopy.eep.pattern=

## Create hex
recipe.objcopy.hex.pattern="{compiler.cmd.elf2hex}" {compiler.cmd.elf2hex.flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"

## Compute size
recipe.size.pattern="{compiler.cmd.size}" -A "{build.path}/{build.project_name}.elf"
recipe.size.regex=\.text\s+([0-9]+).*

# STM32 Uploader tools
# ---------------------

tools.stm32flash.cmd=stm32flash
tools.stm32flash.cmd.windows=stm32flash.exe
tools.stm32flash.path={runtime.ide.path}/hardware/tools

tools.stm32flash.upload.params.verbose=
tools.stm32flash.upload.params.quiet=
tools.stm32flash.upload.pattern="{path}/{cmd}" {upload.verbose} -w {build.path}/{build.project_name}.bin -v -g0 /dev/{serial.port.file}
tools.stm32flash.upload.pattern.windows="{path}/{cmd}" {upload.verbose} -w {build.path}/{build.project_name}.bin -v -g0 {serial.port.file}

tools.stflash.cmd=st-flash
tools.stflash.cmd.windows=stflash.exe
tools.stflash.path={runtime.ide.path}/hardware/tools
tools.stflash.upload.params.verbose=
tools.stflash.upload.params.quiet=
tools.stflash.upload.pattern="{path}/{cmd}" write {build.path}/{build.project_name}.bin 0x08000000

